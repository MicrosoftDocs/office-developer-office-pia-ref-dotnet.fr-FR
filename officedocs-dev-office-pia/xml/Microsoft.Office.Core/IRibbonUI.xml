<Type Name="IRibbonUI" FullName="Microsoft.Office.Core.IRibbonUI">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f912fe8c8db15a87c031bae5d14f2fe64d719567" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20658892" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonUI" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonUI" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonUI" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonUI" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonUI" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C03A7-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3de5b-p101">Objet renvoyé par la procédure <b>onLoad</b> spécifiée dans la balise <b>customUI</b>. L’objet contient des méthodes qui visent à invalider les propriétés des contrôles et à actualiser l’interface utilisateur.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3de5b-p101">The object that is returned by the <b>onLoad</b> procedure specified on the <b>customUI</b> tag.  The object contains methods for invalidating control properties and for refreshing the user interface.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="3de5b-103">
        <para>Vous pouvez personnaliser l’interface utilisateur de ruban (IU) à l’aide des procédures de rappel dans les compléments COM. Démarrage de l’application hôte, la procédure de rappel <b>onLoad</b> est appelée.  La procédure de rappel renvoie ensuite un objet <b>IRibbonUI</b> pointant vers l’interface utilisateur (IU). Vous pouvez utiliser cet objet pour appeler les méthodes <b>Invalidate</b>, <b>InvalidateControl</b>et <b>Refresh</b> .</para>
        <para />
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="3de5b-103">
          <para>You can customize the Ribbon user interface (UI) by using callback procedures in COM add-ins. When the host application starts, the <b>onLoad</b> callback procedure is called.  The callback procedure then returns a <b>IRibbonUI</b> object pointing to the user interface (UI). YOu can use that object to invoke the <b>Invalidate</b>, <b>InvalidateControl</b>, and <b>Refresh</b> methods.</para>
          <para />
        </span>
      </span>
    </remarks>
    <example>
      <span data-ttu-id="3de5b-104">
        <para>Dans l’exemple suivant, le démarrage de l’application hôte déclenche la procédure événementielle <b>onLoad</b> qui appelle alors une procédure qui crée un objet <b>IRibbonUI</b> représentant l’interface utilisateur du ruban.  Ensuite, une procédure de rappel est définie qui annule tous les contrôles mis en cache et l’interface utilisateur.</para>
        <para>Ce qui suit est le code XML pour Office charger le ruban personnalisé :</para>
        <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
        <para>Ce qui suit est la méthode de rappel pour l’événement <b>onLoad</b> :</para>
        <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="3de5b-104">
          <para>In the following example, starting the host application triggers the <b>onLoad</b> event procedure  that then calls a procedure which creates a <b>IRibbonUI</b> object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the cached controls and then refreshes the UI.</para>
          <para>The following is the XML markup for Office to load the custom ribbon:</para>
          <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
          <para>The following is the callback method for the <b>onLoad</b> event:</para>
          <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
        </span>
      </span>
    </example>
  </Docs>
  <Members>
    <Member MemberName="ActivateTab">
      <MemberSignature Language="C#" Value="public void ActivateTab (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTab([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTab(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTab (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTab(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="3de5b-105">Spécifie l’identificateur de l’onglet personnalisé du ruban à activer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-105">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3de5b-106">Active l’onglet personnalisé spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-106">Activates the specified custom tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabMso">
      <MemberSignature Language="C#" Value="public void ActivateTabMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="3de5b-107">Spécifie l’identificateur de l’onglet personnalisé du ruban à activer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-107">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3de5b-108">Active l’onglet intégré spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-108">Activates the specified built-in tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabQ">
      <MemberSignature Language="C#" Value="public void ActivateTabQ (string ControlID, string Namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabQ([in]string ControlID, [in]string Namespace) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabQ(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabQ (ControlID As String, Namespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabQ(System::String ^ ControlID, System::String ^ Namespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
        <Parameter Name="Namespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="3de5b-109">Spécifie l’identificateur de l’onglet personnalisé du ruban à activer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-109">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <param name="Namespace">
          <span data-ttu-id="3de5b-110">Spécifie l’espace de noms de l’élément d’onglet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-110">Specifies the namespace of the tab element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3de5b-111">Active l’onglet personnalisé spécifié sur l’interface utilisateur du ruban Fluent Microsoft Office.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-111">Activates the specified custom tab on the Microsoft Office Fluent Ribbon UI.</span>
          </span>
          <span data-ttu-id="3de5b-112">Utilise le nom qualifié complet de l’onglet qui inclut l’identificateur et l’espace de noms de l’onglet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-112">Uses the fully qualified name of the tab which includes the identifier and the namespace of the tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3de5b-113">Invalide les valeurs mises en cache pour tous les contrôles de l’interface utilisateur du Ruban.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-113">Invalidates the cached values for all of the controls of the Ribbon user interface.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="3de5b-114">
            <para>Vous pouvez personnaliser l’interface utilisateur du ruban à l’aide des procédures de rappel dans les compléments COM. Pour chacun des implémente des rappels du complément, les réponses sont mis en cache.  Par exemple, si le Générateur d’un complément implémente la procédure de rappel <b>getImage</b> pour un bouton, la fonction est appelée une seule fois, l’image se charge, puis, si l’image doit être mis à jour, l’image mise en cache est utilisée au lieu de rappeler la procédure. Ce processus reste en place jusqu'à ce que le complément signale que les valeurs mises en cache ne sont pas valides à l’aide de la méthode <b>Invalidate</b> , à quel moment, la procédure de rappel est à nouveau appelée et la réponse renvoyée est mis en cache.  Le complément peut ensuite forcer une mise à jour immédiate de l’interface utilisateur en appelant la méthode <b>Refresh</b> .</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-114">
              <para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place until the add-in signals that the cached values are invalid by using the <b>Invalidate</b> method,  at which time, the callback procedure is again called and the return response is cached.  The add-in can then force an immediate update of the UI by calling the <b>Refresh</b> method.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="3de5b-115">
            <para>Dans l’exemple suivant, le démarrage de l’application hôte déclenche la procédure événementielle <b>onLoad</b> qui appelle alors une procédure qui crée un objet représentant l’interface utilisateur du ruban.  Ensuite, une procédure de rappel est définie pour tous les contrôles dans l’interface utilisateur invalide, puis comment actualiser l’interface utilisateur.</para>
            <para>Ce qui suit est le code XML pour Office charger le ruban personnalisé :</para>
            <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
            <para>Ce qui suit est la méthode de rappel pour l’événement <b>onLoad</b> :</para>
            <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-115">
              <para>In the following example,  starting the host application triggers the <b>onLoad</b> event  procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the controls on the UI and then refreshes the UI.</para>
              <para>The following is the XML markup for Office to load the custom ribbon:</para>
              <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
              <para>The following is the callback method for the <b>onLoad</b> event:</para>
              <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControl">
      <MemberSignature Language="C#" Value="public void InvalidateControl (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControl([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControl (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControl(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="3de5b-116">Spécifie l'identificateur du contrôle qui sera invalidé</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-116">Specifies the ID of the control that will be invalidated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3de5b-117">Invalide la valeur mise en cache pour un seul contrôle de l’interface utilisateur du Ruban.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-117">Invalidates the cached value for a single control on the Ribbon user interface.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="3de5b-118">
            <para>Vous pouvez personnaliser l’interface utilisateur du ruban à l’aide des procédures de rappel dans les compléments COM. Pour chacun des implémente des rappels du complément, les réponses sont mis en cache.  Par exemple, si le Générateur d’un complément implémente la procédure de rappel <b>getImage</b> pour un bouton, la fonction est appelée une seule fois, l’image se charge, puis, si l’image doit être mis à jour, l’image mise en cache est utilisée au lieu de rappeler la procédure. Ce processus reste en place jusqu'à ce que le complément signale que les valeurs mises en cache ne sont pas valides à l’aide de la méthode <b>InvalidateControl</b> , moment auquel la procédure de rappel est appelée à nouveau et la réponse renvoyée est mis en cache.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-118">
              <para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place for the control until the add-in signals that the cached values are invalid by using the <b>InvalidateControl</b> method,  at which time, the callback procedure is again called and the return response is cached.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="3de5b-119">
            <para>Dans l’exemple suivant, le démarrage de l’application hôte déclenche la procédure événementielle <b>onLoad</b> qui appelle alors une procédure qui crée un objet représentant l’interface utilisateur du ruban.  Ensuite, une procédure de rappel est définie qui annule un contrôle sur l’interface utilisateur et de l’interface utilisateur.</para>
            <para>Ce qui suit est le code XML pour Office charger le ruban personnalisé :</para>
            <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
            <para>Ce qui suit est la méthode de rappel pour l’événement <b>onLoad</b> :</para>
            <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-119">
              <para>In the following example,  starting the host application triggers the <b>onLoad</b> event procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates a control on the UI and then refreshes the UI.</para>
              <para>The following is the XML markup for Office to load the custom ribbon:</para>
              <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
              <para>The following is the callback method for the <b>onLoad</b> event:</para>
              <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControlMso">
      <MemberSignature Language="C#" Value="public void InvalidateControlMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControlMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControlMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControlMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControlMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="3de5b-120">Spécifié l’identificateur du contrôle qui sera invalidé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-120">Specified the identifier of the control that will be invalidated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3de5b-121">Utilisée pour invalider un contrôle intégré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-121">Used to invalidate a built-in control.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="3de5b-122">
            <para>Invalider un contrôle redessine l’écran et entraîne des procédures de rappel associés à ce contrôle à exécuter.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3de5b-122">
              <para>Invalidating a control repaints the screen and causes any callback procedures associated with that control to run.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>