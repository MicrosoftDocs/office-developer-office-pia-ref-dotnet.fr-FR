<Type Name="IRibbonControl" FullName="Microsoft.Office.Core.IRibbonControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68773fd86e42dc3132be028386c9b8eeaf465f51" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20659189" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonControl" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonControl" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C0395-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente l’objet transmis à la procédure de rappel de chaque ruban de l’interface du contrôle utilisateur.</summary>
    <remarks>
      <para>L’objet <b>IRibbonControl</b> contient le nom (ID) du contrôle et de l’objet <b>Window</b> actif du contrôle de l’interface utilisateur du ruban.</para>
      <para />
    </remarks>
    <example>
      <para>L’exemple suivant, écrit en c#, montre deux procédures appelées à partir de la procédure événementielle <b>onAction</b> d’un contrôle de bouton et un contrôle ToggleButton. Dans la première procédure, l’objet <b>IRibbonControl</b> représentant le contrôle est transmis à la procédure et une boîte de message s’affiche indiquant que le bouton a été appuyé ainsi que l’ID du bouton. La deuxième procédure est similaire à la première avec l’ajout d’un paramètre de <b>type Boolean</b> qui indique que l’utilisateur a cliqué.</para>
      <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public object Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Context { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la fenêtre active contenant l'interface utilisateur du ruban qui déclenche une procédure de rappel. En lecture seule.</summary>
        <value>Objet</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Renvoie l'ID du contrôle spécifié dans le fichier de personnalisation de balisage XML du ruban. En lecture seule.</summary>
        <value>String</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Tag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Tag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cette propriété permet de stocker des chaînes arbitraires et de les extraire au moment de l'exécution. En lecture seule.</summary>
        <value>String</value>
        <remarks>
          <para>Vous pouvez normalement faire la distinction entre des contrôles dans un fichier de personnalisation de XML d’interface ruban utilisateur à l’aide de la propriété <b>Id</b> . Toutefois, il existe des restrictions sur ce qui peuvent contenir ID (pas de caractères non alphanumériques et ils doivent être uniques).  La propriété <b>Tag</b> n’ont pas ces restrictions et elle peut être utilisée dans les situations suivantes, où ID ne fonctionne pas :</para>
          <list type="bullet">
            <item>
              <para>Si vous avez besoin stocker une chaîne spéciale avec votre contrôle par exemple, un nom de fichier.  Par exemple : tag="C:\path\file.xlsm. »</para>
            </item>
            <item>
              <para>Si vous souhaitez que plusieurs contrôles peuvent être traités de la même manière par vos procédures de rappel, mais vous ne souhaitez pas mettre à jour une liste de tous leurs ID (qui doit être unique).  Par exemple, vous peut comporter des boutons différents onglets sur le ruban, avec balise = « blue » et puis simplement vérifier la propriété <b>Tag</b> , au lieu de la propriété <b>ID</b> lorsque perfroming certaines actions courantes.</para>
            </item>
          </list>
          <para />
          <para />
        </remarks>
        <example>
          <para>Dans le code XML utilisé pour personnaliser l’interface utilisateur du ruban, vous pouvez définir une balise comme suit. Lorsque l’action MaFonction est appelée, vous pouvez lire la propriété <b>Tag</b> , qui est égale à « une chaîne ».</para>
          <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>